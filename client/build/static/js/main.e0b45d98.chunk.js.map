{"version":3,"sources":["Components/SideDrawer/DrawerToggleBtn.js","Components/Toolbar/Toolbar.js","Components/SideDrawer/SideDrawer.js","Components/Backdrop/Backdrop.js","Components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["DrawerToggleBtn","props","className","onClick","click","Toolbar","drawerClickHandler","href","SideDrawer","drawerClasses","show","Backdrop","Login","Form","FormGroup","Label","Input","type","placeholder","Button","alert","classsName","App","state","sideDrawerOpen","drawerToggleClickHandler","setState","prevState","backdropClickHandler","backdrop","this","style","height","marginTop","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WAWeA,G,MARS,SAAAC,GAAK,OACzB,4BAAQC,UAAU,gBAAgBC,QAASF,EAAMG,OAC7C,yBAAKF,UAAU,uBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0BCgBRG,G,MAnBC,SAAAJ,GAAK,OACjB,4BAAQC,UAAU,WACd,yBAAKA,UAAU,eACX,yBAAKA,UAAU,sBACX,kBAAC,EAAD,CAAiBE,MAAOH,EAAMK,sBAElC,yBAAKJ,UAAU,gBAAe,uBAAGK,KAAK,KAAR,mBAC9B,yBAAKL,UAAU,WACf,yBAAKA,UAAU,qBACX,4BACI,4BAAI,uBAAGK,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,YACJ,4BAAI,uBAAGA,KAAK,KAAR,oBCWTC,G,MAxBI,SAAAP,GACf,IAAIQ,EAAgB,cAIpB,OAHIR,EAAMS,OACND,EAAgB,oBAGhB,yBAAKP,UAAWO,GACZ,4BACI,4BACI,uBAAGF,KAAK,KAAR,SAEJ,4BACI,uBAAGA,KAAK,KAAR,YAEJ,4BACI,uBAAGA,KAAK,KAAR,kBCVLI,G,MAJE,SAAAV,GAAK,OAClB,yBAAKC,UAAU,WAAWC,QAASF,EAAMG,U,uDCwC9BQ,EAtCD,SAAAX,GAAK,OACjB,yBAAKC,UAAU,OACb,yBAAKA,UAAU,mDACb,kBAACW,EAAA,EAAD,CAAMX,UAAU,cACd,4BACE,0BAAMA,UAAU,gCAAhB,YADF,OAGA,wBAAIA,UAAU,eAAd,WACA,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,QAAQC,YAAY,WAElC,kBAACJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,WAAWC,YAAY,cAGrC,kBAACC,EAAA,EAAD,CAAQjB,UAAU,8BAAlB,SAEA,yBAAKA,UAAU,oBAAf,kBAKA,kBAAC,oBAAD,CAAmBC,QAAS,kBAAMiB,MAAM,YACxC,kBAAC,oBAAD,CAAmBjB,QAAS,kBAAMiB,MAAM,YACxC,kBAAC,sBAAD,CAAqBC,WAAW,cAEhC,yBAAKnB,UAAU,eACb,uBAAGK,KAAK,mBAAR,qBACA,0BAAML,UAAU,OAAhB,KACA,uBAAGK,KAAK,oBAAR,wBCOKe,E,2MApCbC,MAAQ,CACNC,gBAAgB,G,EAGlBC,yBAA2B,WACzB,EAAKC,UAAS,SAACC,GACb,MAAO,CAACH,gBAAiBG,EAAUH,oB,EAIvCI,qBAAuB,WACrB,EAAKF,SAAS,CAACF,gBAAgB,K,wEAI/B,IAAIK,EAOJ,OALIC,KAAKP,MAAMC,iBAEbK,EAAW,kBAAC,EAAD,CAAUzB,MAAO0B,KAAKF,wBAIjC,yBAAKG,MAAO,CAACC,OAAQ,SACnB,kBAAC,EAAD,CAAS1B,mBAAoBwB,KAAKL,2BAClC,kBAAC,EAAD,CAAYf,KAAMoB,KAAKP,MAAMC,iBAC5BK,EACD,0BAAME,MAAO,CAACE,UAAW,SACvB,2CACA,kBAAC,EAAD,Y,GA/BQC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e0b45d98.chunk.js","sourcesContent":["import React from 'react';\nimport './DrawerToggleBtn.css';\n\nconst DrawerToggleBtn = props => (\n    <button className=\"toggle-button\" onClick={props.click}>\n        <div className=\"toggle-button-line\" />\n        <div className=\"toggle-button-line\" />\n        <div className=\"toggle-button-line\" />\n    </button>\n);\n\nexport default DrawerToggleBtn;","import React from 'react';\nimport DrawerToggleBtn from '../SideDrawer/DrawerToggleBtn';\nimport './Toolbar.css';\n\nconst Toolbar = props => (\n    <header className=\"toolbar\">\n        <nav className=\"toolbar-nav\">\n            <div className=\"toolbar-toggle-btn\">\n                <DrawerToggleBtn click={props.drawerClickHandler} />\n            </div>\n            <div className=\"toolbar-logo\"><a href=\"/\">BootCamp[HUB] </a></div>\n            <div className=\"spacer\" />\n            <div className=\"toolbar-nav-items\">\n                <ul>\n                    <li><a href=\"/\">Home</a></li>\n                    <li><a href=\"/\">Profile</a></li>\n                    <li><a href=\"/\">Resources</a></li>\n\n                </ul>\n            </div>\n        </nav>\n    </header>\n);\nexport default Toolbar;","import React from 'react';\nimport './SideDrawer.css';\n\nconst SideDrawer = props => {\n    let drawerClasses = 'side-drawer';\n    if (props.show) {\n        drawerClasses = 'side-drawer open';\n    }\n    return (\n        <nav className={drawerClasses}> \n            <ul>\n                <li>\n                    <a href=\"/\">Home</a>\n                </li>\n                <li>\n                    <a href=\"/\">Profile</a>\n                </li>\n                <li>\n                    <a href=\"/\">Resources</a>\n                </li>\n            </ul>\n        </nav>\n    );\n\n};\n\n\nexport default SideDrawer;","import React from 'react';\nimport './Backdrop.css';\n\n// Backdrop for sidedrawer\nconst Backdrop = props => (\n    <div className=\"backdrop\" onClick={props.click} />\n);\n\nexport default Backdrop;","import React from 'react';\nimport './Login.css';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { GoogleLoginButton, \n        GithubLoginButton, \n        FacebookLoginButton } from 'react-social-login-buttons';\n\nconst Login = props => (\n  <div className=\"row\">\n    <div className=\"login-content col-lg-12 col-md-12 col-sm-12 p-0\">\n      <Form className=\"login-form\">\n        <h1>\n          <span className=\"font-weight-bold text-center\">BootCamp</span>HUB\n        </h1>\n        <h2 className=\"text-center\">Welcome</h2>\n        <FormGroup>\n          <Label>Email</Label>\n          <Input type=\"email\" placeholder=\"Email\" />\n        </FormGroup>\n        <FormGroup>\n          <Label>Password</Label>\n          <Input type=\"password\" placeholder=\"Password\" />\n        </FormGroup>\n        {/* App login BTN */}\n        <Button className=\"login-btn btn-lg btn-block\">Login</Button>\n\n        <div className=\"text-center pt-3\">\n          Or sigin with:\n        </div>\n\n        {/* Social Login BTN */}\n        <GoogleLoginButton onClick={() => alert(\"Hello\")} />\n        <GithubLoginButton onClick={() => alert(\"Hello\")} />\n        <FacebookLoginButton classsName=\"mt-3 mb-3\" />\n\n        <div className=\"text-center\">\n          <a href=\"/create_account\">Create an Account</a>\n          <span className=\"p-2\">|</span>\n          <a href=\"/forgot_password\">Forgot Password</a>\n        </div>\n      </Form>\n    </div>\n  </div>\n);\n\nexport default Login;","import React, { Component } from 'react';\n// import './App.css';\nimport Toolbar from \"./Components/Toolbar/Toolbar\";\nimport SideDrawer from './Components/SideDrawer/SideDrawer';\nimport Backdrop from './Components/Backdrop/Backdrop';\nimport Login from './Components/Login/Login';\n\nclass App extends Component {\n  // set initial state\n  state = {\n    sideDrawerOpen: false\n  };\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen};\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen: false})\n  };\n   render() {\n    // let sideDrawer; //null\n    let backdrop;\n\n    if (this.state.sideDrawerOpen) {\n      // sideDrawer = <SideDrawer />;\n      backdrop = <Backdrop click={this.backdropClickHandler} />;\n    }\n\n    return (\n      <div style={{height: '100%'}}>\n        <Toolbar drawerClickHandler={this.drawerToggleClickHandler}/>\n        <SideDrawer show={this.state.sideDrawerOpen} />\n        {backdrop}\n        <main style={{marginTop: '64px'}}>\n          <p>Page Content</p>\n          <Login />\n        </main>\n\n      </div>\n    ); \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}